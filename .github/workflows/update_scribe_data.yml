name: Update Scribe Data and Deploy to Toolforge

on:
  # Trigger on push to main branch.
  push:
    branches: [main, test/toolforge]

  # Trigger: When there is a GitHub Release.
  release:
    types: [published]

  # Manual trigger.
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force data update even if no release'
        required: false
        default: 'false'
        type: boolean

  # Monthly schedule run.
  schedule:
    - cron: '0 0 1 * *' # Run on the 1st of every month at midnight UTC
  
jobs:
  update-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 180  # 3 hours timeout for large data processing

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl git sqlite3 make

    - name: Make script executable
      run: chmod +x ./update_data.sh
    
    - name: Run update script
      run: ./update_data.sh true

    - name: Create deployment package
      run: |
        if [ ! -d "./packs/sqlite" ]; then
          echo "‚ùå SQLite packs directory not found"
          exit 1
        fi

        SQLITE_FILES=$(find ./packs/sqlite -name "*.sqlite" | wc -l)
        if [ "$SQLITE_FILES" -eq 0 ]; then
          echo "‚ùå No SQLite files found"
          exit 1
        fi
        
        echo "‚úÖ Found $SQLITE_FILES SQLite files"
        tar -czf scribe-data-sqlite.tar.gz -C ./packs/sqlite .
        echo "üì¶ Created deployment package"
        
        # Verify the package was created and show its size
        if [ -f "scribe-data-sqlite.tar.gz" ]; then
          echo "‚úÖ Package created successfully: $(ls -lh scribe-data-sqlite.tar.gz)"
        else
          echo "‚ùå Package creation failed"
          exit 1
        fi

    - name: Upload SQLite files as artifact
      uses: actions/upload-artifact@v4
      with:
        name: scribe-data-sqlite-${{ github.run_number }}
        path: ./scribe-data-sqlite.tar.gz
        retention-days: 30

    - name: Setup SSH for Toolforge deployment
      if: success()
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.TOOLFORGE_SSH_KEY }}

    - name: Deploy to Toolforge
      if: success()
      run: |
        # Add Toolforge to known hosts.
        ssh-keyscan -H login.toolforge.org >> ~/.ssh/known_hosts

        # Verify the package exists before transfer
        if [ ! -f "scribe-data-sqlite.tar.gz" ]; then
          echo "‚ùå Package file not found before transfer"
          ls -la ./
          exit 1
        fi
        
        echo "üì¶ Package info: $(ls -lh scribe-data-sqlite.tar.gz)"
        
        # Test SSH connection first
        echo "üîç Testing SSH connection..."
        ssh -o ConnectTimeout=30 -o ServerAliveInterval=60 \
          ${{ secrets.TOOLFORGE_USER }}@login.toolforge.org \
          "echo 'SSH connection successful'; whoami; pwd; df -h ~"
        
        if [ $? -ne 0 ]; then
          echo "‚ùå SSH connection failed"
          exit 1
        fi
        
        # Transfer the file and immediately verify
        echo "üì§ Transferring package to Toolforge..."
        
        # Use a combined approach: transfer and verify in one SSH session
        ssh -o ConnectTimeout=30 -o ServerAliveInterval=60 \
          ${{ secrets.TOOLFORGE_USER }}@login.toolforge.org << 'TRANSFER_EOF'
          
          # Clean up any existing file first
          rm -f ~/scribe-data-sqlite.tar.gz
          
          echo "üì• Ready to receive file transfer..."
          echo "Current directory: $(pwd)"
          echo "Available space: $(df -h ~ | tail -1)"
        TRANSFER_EOF
        
        # Now do the actual file transfer with error checking
        echo "üöÄ Starting file transfer..."
        scp -o ConnectTimeout=30 -o ServerAliveInterval=60 -v \
          ./scribe-data-sqlite.tar.gz \
          ${{ secrets.TOOLFORGE_USER }}@login.toolforge.org:~/scribe-data-sqlite.tar.gz
        
        SCP_EXIT_CODE=$?
        if [ $SCP_EXIT_CODE -ne 0 ]; then
          echo "‚ùå SCP transfer failed with exit code: $SCP_EXIT_CODE"
          echo "üîç Attempting alternative transfer method..."
          
          # Try alternative transfer using SSH with base64 encoding
          echo "üì§ Using base64 transfer method..."
          base64 ./scribe-data-sqlite.tar.gz | ssh -o ConnectTimeout=30 \
            ${{ secrets.TOOLFORGE_USER }}@login.toolforge.org \
            "base64 -d > ~/scribe-data-sqlite.tar.gz"
          
          if [ $? -ne 0 ]; then
            echo "‚ùå Alternative transfer method also failed"
            exit 1
          fi
        fi
        
        # Verify the transfer was successful
        echo "‚úÖ Verifying file transfer..."
        ssh -o ConnectTimeout=30 ${{ secrets.TOOLFORGE_USER }}@login.toolforge.org << 'VERIFY_EOF'
          if [ ! -f "~/scribe-data-sqlite.tar.gz" ]; then
            echo "‚ùå Package file still not found after transfer"
            echo "üìÅ Home directory contents:"
            ls -la ~/
            exit 1
          fi
          
          echo "‚úÖ Package found: $(ls -lh ~/scribe-data-sqlite.tar.gz)"
          
          # Test that the file is readable and not corrupted
          if ! tar -tzf ~/scribe-data-sqlite.tar.gz > /dev/null 2>&1; then
            echo "‚ùå Package appears to be corrupted"
            exit 1
          fi
          
          echo "‚úÖ Package integrity verified"
        VERIFY_EOF
        
        if [ $? -ne 0 ]; then
          echo "‚ùå File verification failed"
          exit 1
        fi
        
        # Now proceed with deployment
        echo "üöÄ Starting deployment process..."
        ssh -o ConnectTimeout=30 -o ServerAliveInterval=60 \
          ${{ secrets.TOOLFORGE_USER }}@login.toolforge.org << 'DEPLOY_EOF'
          
          # First, copy the file to a shared location accessible by both users
          # Use /tmp with a predictable name
          TEMP_FILE="/tmp/scribe-data-sqlite-deployment.tar.gz"
          cp ~/scribe-data-sqlite.tar.gz "$TEMP_FILE"
          chmod 644 "$TEMP_FILE"  # Make sure it's readable by the tool user
          
          if [ ! -f "$TEMP_FILE" ]; then
            echo "‚ùå Failed to copy package to temporary location"
            exit 1
          fi
          
          echo "üìÅ Package staged at: $TEMP_FILE"
          echo "üìä File info: $(ls -la $TEMP_FILE)"
          
          # Clean up the original file in home directory
          rm ~/scribe-data-sqlite.tar.gz
        DEPLOY_EOF
        
        # Now run a separate SSH session as the tool user
        echo "üîÑ Switching to tool user for deployment..."
        ssh -o ConnectTimeout=30 -o ServerAliveInterval=60 \
          ${{ secrets.TOOLFORGE_USER }}@login.toolforge.org << 'TOOL_DEPLOY_EOF'
          
          # become the tool (our server)
          become scribe-test-server
          
          # Check if the temp file exists and is accessible
          TEMP_FILE="/tmp/scribe-data-sqlite-deployment.tar.gz"
          if [ ! -f "$TEMP_FILE" ]; then
            echo "‚ùå Package file not accessible from tool user context"
            echo "üìÅ /tmp contents:"
            ls -la /tmp/scribe-data-*
            exit 1
          fi
          
          echo "‚úÖ Package accessible: $(ls -la $TEMP_FILE)"
          
          # Navigate to the server directory
          cd ~/Scribe-Server || {
            echo "‚ùå Failed to navigate to Scribe-Server directory"
            echo "üìÅ Available directories:"
            ls -la ~/
            exit 1
          }
          
          echo "üìÅ Current location: $(pwd)"
          
          # Copy the package from temp location to server directory
          cp "$TEMP_FILE" ./scribe-data-sqlite.tar.gz
          
          if [ ! -f "./scribe-data-sqlite.tar.gz" ]; then
            echo "‚ùå Failed to copy package to server directory"
            exit 1
          fi
          
          # Create backup of existing data
          if [ -d "./packs/sqlite" ]; then
            BACKUP_NAME="sqlite.backup.$(date +%Y%m%d_%H%M%S)"
            mv ./packs/sqlite ./packs/$BACKUP_NAME
            echo "üì¶ Backed up existing SQLite data to: $BACKUP_NAME"
          fi
          
          # Create packs directory
          mkdir -p ./packs/sqlite
          
          # Extract new SQLite files
          echo "üì§ Extracting SQLite files..."
          tar -xzf scribe-data-sqlite.tar.gz -C ./packs/sqlite/
          
          if [ $? -ne 0 ]; then
            echo "‚ùå Failed to extract package"
            # Try to restore backup if extraction failed
            if [ -d "./packs/$BACKUP_NAME" ]; then
              mv ./packs/$BACKUP_NAME ./packs/sqlite
              echo "üîÑ Restored backup due to extraction failure"
            fi
            exit 1
          fi
          
          # Verify extraction
          echo "üìä Deployed SQLite files:"
          ls -la ./packs/sqlite/
          
          EXTRACTED_FILES=$(find ./packs/sqlite -name "*.sqlite" | wc -l)
          echo "‚úÖ Successfully extracted $EXTRACTED_FILES SQLite files"
          
          # Run database migration if make is available
          if command -v make &> /dev/null; then
            echo "üîÑ Running database migration..."
            make migrate || echo "‚ö†Ô∏è Migration command failed but continuing..."
          else
            echo "‚ö†Ô∏è Make command not found, skipping migration"
          fi
          
          # Cleanup
          rm "$TEMP_FILE" 2>/dev/null || true
          rm ./scribe-data-sqlite.tar.gz 2>/dev/null || true
          
          echo "‚úÖ Deployment completed successfully"
        TOOL_DEPLOY_EOF

    - name: Notify on success
      if: success()
      run: |
        echo "üéâ Scribe-Data update and deployment completed successfully!"
        echo "üìä SQLite files have been updated on Toolforge"
        echo "üîÑ Database migration completed"

    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå Deployment failed. Check the logs above for details."
        echo "üîç Common issues:"
        echo "  - SSH key authentication"
        echo "  - Network connectivity to Toolforge"
        echo "  - File transfer permissions"
        echo "  - Package extraction issues"
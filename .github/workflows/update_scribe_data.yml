name: Update Scribe Data and Deploy to Toolforge

on:
  # Trigger on push to main branch.
  push:
    branches: [main, test/toolforge]

  # Trigger: When there is a GitHub Release.
  release:
    types: [published]

  # Manual trigger.
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force data update even if no release'
        required: false
        default: 'false'
        type: boolean

  # Monthly schedule run.
  schedule:
    - cron: '0 0 1 * *' # Run on the 1st of every month at midnight UTC
  
jobs:
  update-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 180  # 3 hours timeout for large data processing

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl git sqlite3 make

    - name: Make script executable
      run: chmod +x ./update_data.sh
    
    - name: Run update script
      run: ./update_data.sh true

    - name: Create deployment package
      run: |
        if [ ! -d "./packs/sqlite" ]; then
          echo "❌ SQLite packs directory not found"
          exit 1
        fi

        SQLITE_FILES=$(find ./packs/sqlite -name "*.sqlite" | wc -l)
        if [ "$SQLITE_FILES" -eq 0 ]; then
          echo "❌ No SQLite files found"
          exit 1
        fi
        
        echo "✅ Found $SQLITE_FILES SQLite files"
        tar -czf scribe-data-sqlite.tar.gz -C ./packs/sqlite .
        echo "📦 Created deployment package"
        
        # Verify the package was created and show its size
        if [ -f "scribe-data-sqlite.tar.gz" ]; then
          echo "✅ Package created successfully: $(ls -lh scribe-data-sqlite.tar.gz)"
        else
          echo "❌ Package creation failed"
          exit 1
        fi

    - name: Upload SQLite files as artifact
      uses: actions/upload-artifact@v4
      with:
        name: scribe-data-sqlite-${{ github.run_number }}
        path: ./scribe-data-sqlite.tar.gz
        retention-days: 30

    - name: Setup SSH for Toolforge deployment
      if: success()
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.TOOLFORGE_SSH_KEY }}

    - name: Deploy to Toolforge
      if: success()
      run: |
        # 1. Add Toolforge to known hosts
        ssh-keyscan -H login.toolforge.org >> ~/.ssh/known_hosts

        # 2. Transfer the package directly to the tool's project directory
        echo "📤 Transferring package to Toolforge..."
        scp -o ConnectTimeout=60 ./scribe-data-sqlite.tar.gz \
          ${{ secrets.TOOLFORGE_USER }}@login.toolforge.org:/data/project/scribe-test-server/scribe-data-sqlite.tar.gz
        
        if [ $? -ne 0 ]; then
          echo "❌ SCP file transfer failed."
          exit 1
        fi
        echo "✅ Package transferred successfully."

        # 3. Run a single script on the remote server to deploy the package
        echo "🚀 Starting remote deployment process..."
        ssh -o ConnectTimeout=60 \
          ${{ secrets.TOOLFORGE_USER }}@login.toolforge.org << 'DEPLOY_SCRIPT_EOF'

          # --- Switch to the tool user ---
          become scribe-test-server

          # --- Running as the tool user (e.g., scribe-test-server) ---
          # Current Directory: /data/project/scribe-test-server

          # Move the package into the Scribe-Server directory
          if [ ! -f "./scribe-data-sqlite.tar.gz" ]; then
            echo "❌ Package not found in project directory."
            exit 1
          fi
          echo "✅ Package verified in project directory."

          mv ./scribe-data-sqlite.tar.gz ./Scribe-Server/
          if [ $? -ne 0 ]; then
            echo "❌ Failed to move package into Scribe-Server."
            exit 1
          fi

          # Navigate into the Scribe-Server directory
          cd ./Scribe-Server || { echo "❌ Failed to navigate to Scribe-Server."; exit 1; }

          # Create a backup of existing data
          if [ -d "./packs/sqlite" ]; then
            BACKUP_NAME="sqlite.backup.$(date +%Y%m%d_%H%M%S)"
            mv ./packs/sqlite ./packs/$BACKUP_NAME
            echo "📦 Backed up existing data to $BACKUP_NAME"
          fi

          # Create packs directory and extract the new data
          mkdir -p ./packs/sqlite
          echo "📤 Extracting new data..."
          tar -xzf scribe-data-sqlite.tar.gz -C ./packs/sqlite/

          # Run database migration
          echo "🔄 Running database migration..."
          make migrate

          # Clean up the deployment package
          rm ./scribe-data-sqlite.tar.gz

          echo "🎉 Deployment completed successfully!"

        DEPLOY_SCRIPT_EOF


    - name: Notify on success
      if: success()
      run: |
        echo "🎉 Scribe-Data update and deployment completed successfully!"
        echo "📊 SQLite files have been updated on Toolforge"
        echo "🔄 Database migration completed"

    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ Deployment failed. Check the logs above for details."
        echo "🔍 Common issues:"
        echo "  - SSH key authentication"
        echo "  - Network connectivity to Toolforge"
        echo "  - File transfer permissions"
        echo "  - Package extraction issues"